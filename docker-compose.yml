version: '3.8'

services:

###################################################################### postgres

  passengerdb:
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=passengerdb'
      - 'POSTGRES_PASSWORD=postgre'
      - 'POSTGRES_USER=postgres'
    ports:
      - '5452:5432'
    networks:
      - net    

  driverdb:
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=driverdb'
      - 'POSTGRES_PASSWORD=postgre'
      - 'POSTGRES_USER=postgres'
    ports:
      - '5442:5432'
    networks:
      - net

    

  ridedb:
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=ridedb'
      - 'POSTGRES_PASSWORD=postgre'
      - 'POSTGRES_USER=postgres'      

    ports:
      - '5454:5432'
    networks:
      - net


  paymentdb:
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=paymentdb'
      - 'POSTGRES_PASSWORD=postgre'
      - 'POSTGRES_USER=postgres'
    ports:
      - '5455:5432'
    networks:
      - net


######################################################################### zookeeper + kafka

  zookeeper:
    image: zookeeper:3.7.0
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    networks:
      - net


  kafka:
    image: obsidiandynamics/kafka
    container_name: kafka
    restart: "no"
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: DOCKER_INTERNAL://:29092,DOCKER_EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:29092,DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - net


############################################################################ eureka + api-gateway

  eureka-server:
    build:
      dockerfile: ./eureka-server/Dockerfile
    ports:
      - '8761:8761'
    networks:
      - net


  api-gateway:
    build:
      dockerfile: ./api-gateway/Dockerfile
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
    ports:
      - '8765:8765'    
    depends_on:
      - eureka-server
    networks:
      - net


####################################################################### elk / efk

  prometheus:
    image: prom/prometheus:v2.50.1
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - net
  
  
  grafana:
    image: grafana/grafana:10.3.3
    ports:
      - "3000:3000"
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    volumes:
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    networks:
      - net  


  kibana:
    image: kibana:7.17.17
    ports:
      - '5601:5601'
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    depends_on:
      - elasticsearch
    networks:
      - net


  logstash:
    image: logstash:7.17.17
    ports:
      - '5000:5000'
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"      
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
    depends_on:
      - elasticsearch
    networks:
      - net


  zipkin:
    image: openzipkin/zipkin:3.0.0
    ports:
      - '9411:9411'    
    networks:
      - net

  elasticsearch:
    image: elasticsearch:8.12.0
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.audit.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    networks:
      - net


####################################################################### java services

  driver:
    build:
      dockerfile: ./driver-service/Dockerfile
    ports:
      - '8081:8081'
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://driverdb:5432/driverdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgre
    depends_on:
      - driverdb
      - eureka-server
    networks:
      - net



  passenger:
    build:
      dockerfile: ./passenger-service/Dockerfile
    ports:
      - '8080:8080'
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://passengerdb:5432/passengerdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgre
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    depends_on:
      - passengerdb
      - kafka     
      - eureka-server
    networks:
      - net


  ride:
    build:
      dockerfile: ./ride-service/Dockerfile
    ports:
      - '8082:8082'
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://ridedb:5432/ridedb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgre      
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    depends_on:
      - ridedb
      - kafka      
      - eureka-server
    networks:
      - net

     

  payment:
    build:
      dockerfile: ./payment-service/Dockerfile
    ports:
      - '8084:8084'
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://paymentdb:5432/paymentdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgre
    depends_on:
      - paymentdb  
      - eureka-server
    networks:
      - net


networks:
    net:
      driver: bridge  
